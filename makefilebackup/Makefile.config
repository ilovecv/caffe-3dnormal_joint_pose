## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
# CUSTOM_CXX := g++
HOSTNAME := $(shell (hostname | awk -F "." '{print $$1}'))

# CUDA directory contains bin/ and lib/ directories that we need.
# CUDA_DIR := /opt/cuda-5.5

ifeq ($(HOSTNAME),compute-0-5)
	CUDA_DIR := /usr/local/cuda-5.5
	MATLAB_DIR := /opt/matlab/8.1
else
	CUDA_DIR := /opt/cuda-5.5
	MATLAB_DIR := /usr/local/lib/matlab
endif

# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr

# CUDA architecture setting: going with all of them (up to CUDA 5.5 compatible).
# For the latest architecture, you need to install CUDA >= 6.0 and uncomment
# the *_50 lines below.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
		-gencode arch=compute_20,code=sm_21 \
		-gencode arch=compute_30,code=sm_30 \
		-gencode arch=compute_35,code=sm_35 \
		#-gencode arch=compute_50,code=sm_50 \
		#-gencode arch=compute_50,code=compute_50

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
ifeq ($(HOSTNAME),compute-0-5)
	BLAS := atlas
else
	BLAS := mkl
endif
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
# BLAS_INCLUDE := /path/to/your/blas
# BLAS_LIB := /path/to/your/blas

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
# MATLAB_DIR := /usr/local/lib/matlab
# MATLAB_DIR := /Applications/MATLAB_R2012b.app

# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
PYTHON_INCLUDES := /usr/include/python2.7 \
	/usr/include/python2.7/Numeric
# Anaconda Python distribution is quite popular. Include path:
# PYTHON_INCLUDE := $(HOME)/anaconda/include \
		# $(HOME)/anaconda/include/python2.7 \
		# $(HOME)/anaconda/lib/python2.7/site-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
PYTHON_LIB := /usr/local/lib
# PYTHON_LIB := $(HOME)/anaconda/lib

# Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDES) /usr/local/include /opt/include /opt/glog/include
LIBRARY_DIRS := $(PYTHON_LIB) /usr/lib /usr/local/lib /opt/lib

ifeq ($(HOSTNAME),compute-0-5)
	INCLUDE_DIRS := $(INCLUDE_DIRS) /opt/glog/include
endif
# Make build host machine dependent.
#BUILD_DIR := build
#DISTRIBUTE_DIR := distribute

BUILD_DIR := build_$(HOSTNAME)
DISTRIBUTE_DIR := distribute_$(HOSTNAME)

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
DEBUG := 0

# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0
